if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'dir': '~/.vim/plugged/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'christoomey/vim-tmux-navigator'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/tpope/vim-repeat.git'
" Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

" Theme
Plug 'https://github.com/majutsushi/tagbar'
Plug 'itchyny/lightline.vim'
Plug 'nicknisi/vim-base16-lightline'
Plug 'chriskempson/base16-vim'
Plug 'joshdick/onedark.vim'

" align to any character :Tab /<some character>
Plug 'godlygeek/tabular'

" note taking stored on github
"Plug 'vimwiki/vimwiki'


" Sytax
call plug#end()

"###Theme Stuff###
let g:onedark_termcolors=16
let g:onedark_terminal_italics=1
let g:onedark_hide_endofbuffer = 1
" let g:lightline = {'colorscheme': 'base16'}
let g:lightline = {
            \   'colorscheme': 'base16',
            \   'active': {
            \       'left': [ [ 'mode', 'paste' ],
            \               [ 'gitbranch' ],
            \               [ 'readonly', 'filetype', 'filename' ]],
            \       'right': [ [ 'percent' ], [ 'lineinfo' ],
            \               [ 'fileformat', 'fileencoding' ],
            \               [ 'gitblame', 'currentfunction', 'linter_errors', 'linter_warnings' ]]
            \   },
            \   'component_expand': {
            \   },
            \   'component_type': {
            \       'readonly': 'error',
            \       'linter_warnings': 'warning',
            \       'linter_errors': 'error'
            \   },
            \   'component_function': {
            \       'fileencoding': 'helpers#lightline#fileEncoding',
            \       'filename': 'helpers#lightline#fileName',
            \       'fileformat': 'helpers#lightline#fileFormat',
            \       'filetype': 'helpers#lightline#fileType',
            \       'gitbranch': 'helpers#lightline#gitBranch',
            \       'currentfunction': 'helpers#lightline#currentFunction',
            \       'gitblame': 'helpers#lightline#gitBlame'
            \   },
            \   'tabline': {
            \       'left': [ [ 'tabs' ] ],
            \       'right': [ [ 'close' ] ]
            \   },
            \   'tab': {
            \       'active': [ 'filename', 'modified' ],
            \       'inactive': [ 'filename', 'modified' ],
            \   },
            \   'separator': { 'left': '', 'right': '' },
            \   'subseparator': { 'left': '', 'right': '' }
        \ }

if has("gui_macvim")
set guifont=Operator\ Mono\ Medium:h15
endif

" status line
" set statusline+=%<%f\ %h%m%r%{FugitiveStatusline()}%=%-14.(%l,%c%V%)\ %P

"###General###
set ruler
set history=1000
set wrapmargin=8			" wrap lines when coming within n characters from side
set linebreak				" set soft wrapping
set showbreak=…				" show ellipsis at breaking
set autoindent				" automatically set indent of new line
set ttyfast					" faster redrawing
"set diffopt+=vertical
set laststatus=2			" show the status line all the time:set nostartofline
set scrolloff=7				" set 7 lines to the cursors - when moving vertical
set wildmenu				" enhanced command line completion
set hidden					" current buffer can be put into background
set showcmd					" show incomplete commands
set noshowmode				" don't show which mode disabled for PowerLine
set wildmode=list:longest	" complete files like a shell
set shell=$SHELL
" set cmdheight=1			" command bar height USE WITHOUT COC.NVIM
set title					" set terminal title
set showmatch				" show matching braces
set mat=2					" how many tenths of a second to blink

" Tab control
set textwidth=120
set expandtab " insert spaces rather than tabs for <Tab>
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'

" code folding settings
set foldmethod=syntax " fold based on indent
set foldlevelstart=99
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

" Spelling
set spell spelllang=en_us
" setlocal spell spelllang=en_us for local buffers
" set spell = on | set nospell = off

" Searching
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set hlsearch " highlight search results
set incsearch " set incremental search, like modern browsers
"set nohlsearch
set nolazyredraw " don't redraw while executing macros
set magic " Set magic on, for regex

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500
							
" toggle invisible characters
set list
set listchars=tab:→\ ,eol:¬,trail:·,extends:❯,precedes:❮,nbsp:+
set showbreak=↪
set wrap
set encoding=UTF-8
scriptencoding utf-8
set cursorline
set number  
set t_Co=256
set mouse=a
set backspace=indent,eol,start
set clipboard=unnamed

" within .vim/
set undofile
set undolevels=1000
set undoreload=10000

set undodir=~/.vim/_undo         " where to save undo histories
set nobackup
set nowritebackup
set directory=~/.vim/_swap/      " where to put swap files.

let g:python_host_prog = '/usr/local/bin/python2'
let g:python3_host_prog = '/usr/local/opt/python/libexec/bin/python'

"this may not be needed using tmux alias
if &term =~ '256color'
" disable background color erase
  set t_ut=
endif

" enable 24 bit color support if supported
if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
endif

if (has("termguicolors"))
    set termguicolors
endif

"###Keybindings###
let mapleader = ','
nnoremap <Leader>, <C-w>

" commenting
nnoremap <Leader>/ :s!^!#!<CR>

" Faster page scolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" save buffer
nnoremap <Leader><C-s> :w<CR>
"noremap <C-I><C-I> :w<CR> tab version of saving

" tagbar and nerdtree shortcuts
nnoremap <Leader>~ :TagbarToggle<CR>
nnoremap <Leader>` :NERDTreeToggle<CR>

"  running scripts within vim
nnoremap <Leader><C-r> :term python % <CR>
nnoremap <Leader><C-w> :bd! <CR>

" switch between current and last buffer
nnoremap <Leader>l <c-^>
nnoremap <Leader>b :bp<CR>
nnoremap <Leader>n :bn<CR>

nnoremap <C-p> :Rg<CR>
nnoremap <C-f> :Files<CR>
nnoremap <C-b> :Buffer<CR>
nnoremap <Leader>t :Tags<CR>

" move line mappings
" ∆ is <A-j> on macOS
" ˚ is <A-k> on macOS
nnoremap <C-M-j> :m .+1<cr>==
nnoremap <C-M-k> :m .-2<cr>==
inoremap <C-M-j> <Esc>:m .+1<cr>==gi
inoremap <C-M-k> <Esc>:m .-2<cr>==gi
vnoremap <C-M-j> :m '>+1<cr>gv=gv
vnoremap <C-M-k> :m '<-2<cr>gv=gv

let g:tmux_navigator_no_mappings = 1
" " normal
nnoremap <silent> {<M-h>} :TmuxNavigateLeft<cr>
nnoremap <silent> {<M-j>} :TmuxNavigateDown<cr>
nnoremap <silent> {<M-k>} :TmuxNavigateUp<cr>
nnoremap <silent> {<M-l>} :TmuxNavigateRight<cr>
nnoremap <silent> {<M-\\>} :TmuxNavigatePrevious<cr>
" insert
inoremap <silent> {<M-h>} :TmuxNavigateLeft<cr>
inoremap <silent> {<M-j>} :TmuxNavigateDown<cr>
inoremap <silent> {<M-k>} :TmuxNavigateUp<cr>
inoremap <silent> {<M-l>} :TmuxNavigateRight<cr>
inoremap <silent> {<M-\\>} :TmuxNavigatePrevious<cr>
" visual
vnoremap <silent> {<M-h>} :TmuxNavigateLeft<cr>
vnoremap <silent> {<M-j>} :TmuxNavigateDown<cr>
vnoremap <silent> {<M-k>} :TmuxNavigateUp<cr>
vnoremap <silent> {<M-l>} :TmuxNavigateRight<cr>
vnoremap <silent> {<M-\\>} :TmuxNavigatePrevious<cr>

" use rg for vimgrep
set grepprg=rg\ --vimgrep

" set paste toggle
set pastetoggle=<leader>v

" edit ~/.config/nvim/init.vim
" nnoremap <Leader>conf :e! ~/.vimrc<cr>

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R --exclude=.git --exclude=env'

" [Commands] --expect expression for directly executing the command
" let g:fzf_commands_expect = 'alt-enter,ctrl-x'

"#######################################################################
" NERD Syntax Highlight settings                                                         |
" ######################################################################
" sync open file with NERDTree
" Check if NERDTree is open or active
function! IsNERDTreeOpen()        
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
" file, and we're not in vimdiff
function! SyncTree()
  if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
      NERDTreeFind
    wincmd p
  endif
endfunction

" Highlight currently open buffer in NERDTree
autocmd BufEnter * call SyncTree()

let g:NERDTreeIgnore = ['^node_modules$']
let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
" disables uncommon file types to reduce lag
let g:NERDTreeLimitedSyntax = 1

"#######################################################################
" NERDCommenter settings                                                         |
" ######################################################################
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
" let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

colorscheme onedark

" make the highlighting of tabs and other non-text less annoying
highlight SpecialKey ctermfg=19
highlight NonText ctermfg=19

" make comments and HTML attributes italic
highlight Comment cterm=italic
highlight htmlArg cterm=italic
highlight xmlAttrib cterm=italic
highlight Type cterm=italic
highlight Normal ctermbg=none

"tells ctags where to look for tags file
set tags=./tags;
