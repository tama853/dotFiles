set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'scrooloose/nerdtree'  
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'tpope/vim-fugitive' 
Plugin 'bling/vim-bufferline'
Plugin 'christoomey/vim-tmux-navigator'

" Theme
Plugin 'nicknisi/vim-base16-lightline'
Plugin 'https://github.com/majutsushi/tagbar'
Plugin 'https://github.com/tpope/vim-obsession'
Plugin 'itchyny/lightline.vim'
Plugin 'chriskempson/base16-vim'
Plugin 'joshdick/onedark.vim'
"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'

" Note taking and format
Plugin 'vimwiki/vimwiki'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
Plugin 'sheerun/vim-polyglot'

" Sytax
Plugin 'Valloric/YouCompleteMe'
call vundle#end()

"###Theme Stuff###
let g:onedark_termcolors=16
let g:onedark_terminal_italics=1
let g:onedark_hide_endofbuffer = 1
let g:lightline = {'colorscheme': 'base16'}

if has("gui_macvim")
set guifont=Operator\ Mono\ Medium:h16
endif

let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_theme='onedark'
let g:bufferline_echo = 0										
"###General###
set history=1000
set wrapmargin=8			" wrap lines when coming within n characters from side
set linebreak				" set soft wrapping
set showbreak=…				" show ellipsis at breaking
set autoindent				" automatically set indent of new line
set ttyfast					" faster redrawing
set diffopt+=vertical
set laststatus=2			" show the status line all the time:set nostartofline
set scrolloff=7				" set 7 lines to the cursors - when moving vertical
set wildmenu				" enhanced command line completion
set hidden					" current buffer can be put into background
set showcmd					" show incomplete commands
set noshowmode				" don't show which mode disabled for PowerLine
set wildmode=list:longest	" complete files like a shell
set shell=$SHELL
set cmdheight=1				" command bar height
set title					" set terminal title
set showmatch				" show matching braces
set mat=2					" how many tenths of a second to blink

" Tab control
set textwidth=120
set expandtab " insert spaced rather than tabs for <Tab>
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'

" code folding settings
set foldmethod=syntax " fold based on indent
set foldlevelstart=99
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

" Spelling
set spell spelllang=en_us
" setlocal spell spelllang=en_us for local buffers
" set spell = on | set nospell = off

" Searching
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set hlsearch " highlight search results
set incsearch " set incremental search, like modern browsers
"set nohlsearch
set nolazyredraw " don't redraw while executing macros
set magic " Set magic on, for regex

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500
							
" toggle invisible characters
"set list
"set listchars=tab:→\ ,eol:¬,trail:·,extends:❯,precedes:❮,nbsp:+
set showbreak=↪
set wrap
set encoding=utf-8
scriptencoding utf-8
set cursorline
set number  
set t_Co=256
set mouse=a
set backspace=indent,eol,start
set clipboard=unnamed
       
let g:python_host_prog = '/usr/local/bin/python2'
let g:python3_host_prog = '/usr/local/opt/python/libexec/bin/python'

"this may not be needed using tmux alias
if &term =~ '256color'
" disable background color erase
  set t_ut=
endif

" enable 24 bit color support if supported
if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
endif

if (has("termguicolors"))
    set termguicolors
endif

"###Keybindings###
let mapleader = ','
nnoremap <Leader>, <C-w>

" Faster page scolling
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>
nnoremap <C-u> 5<C-u>
nnoremap <C-d> 5<C-d>

nnoremap <Leader><C-s> :wa <CR>
"noremap <C-I><C-I> :wa <CR> tab version of saving

nnoremap <Leader>` :TagbarToggle<CR>
nnoremap <Leader>~ :NERDTreeToggle<CR>

"  running scripts within vim
nnoremap <Leader><C-r> :term python % <CR>
nnoremap <Leader><C-w> :bd! <CR>

nnoremap <Leader>a :buffers<CR>:buffer<Space>
nnoremap <Leader>b :bp<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>g :e#<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

nnoremap <C-p> :Rg<Cr>
nnoremap <C-F> :Files<Cr>
"nnoremap <Leader><C-F> :FZF ~<Cr>

set grepprg=rg\ --vimgrep

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let g:tmux_navigator_no_mappings = 1
nnoremap <silent> {<C-w>Left} :TmuxNavigateLeft<cr>
nnoremap <silent> {<C-w>Down} :TmuxNavigateDown<cr>
nnoremap <silent> {<C-w>Up} :TmuxNavigateUp<cr>
nnoremap <silent> {<C-w>Right} :TmuxNavigateRight<cr>
nnoremap <silent> {<C-w>C-/}  :TmuxNavigatePrevious<cr>

set undofile
set undolevels=1000
set undoreload=10000

set undodir=~/.vim/_undo         " where to save undo histories
set backupdir=~/.vim/_backup/    " where to put backup files.
set directory=~/.vim/_swap/      " where to put swap files.

"#######################################################################
"Syntastic stuff##########                                             |
"#######################################################################
set statusline+=%#warningmsg#
set statusline+=%*

" YouCompleteMe settings                                                        
let g:ycm_collect_identifiers_from_comments_and_strings = 0                                                     
let g:ycm_min_num_of_chars_for_completion=2                                                                       
let g:ycm_cache_omnifunc=0                                                                                                           
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_register_as_syntastic_checker = 1

let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_always_populate_location_list = 1 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1

let g:ycm_complete_in_comments = 1                                                                                                  
let g:ycm_complete_in_strings = 1                                               
let g:ycm_autoclose_preview_window_after_completion = 1                         
let g:ycm_autoclose_preview_window_after_insertion = 1                          
"let g:ycm_filetype_whitelist = { 'python': 1 }                             

"#######################################################################
"#######################################################################
"
let g:ycm_confirm_extra_conf=0
let g:ycm_use_clangd = 0
let g:ycm_collect_identifiers_from_tags_files = 1
"let g:ycm_clangd_binary_path = ''
""let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'

"#######Tagbar############
""g:tagbar_autoclose

" Colorscheme and final setup
    " This call must happen after the plug#end() call to ensure
    " that the colorschemes have been loaded
"if filereadable(expand("~/.vimrc_background"))
"	let base16colorspace=256
 " source ~/.vimrc_background
"else
"  let g:onedark_termcolors=16
"  let g:onedark_terminal_italics=1
"  colorscheme onedark
"endif
syntax on
filetype plugin indent on
colorscheme onedark
"set background=dark

" make the highlighting of tabs and other non-text less annoying
highlight SpecialKey ctermfg=19
highlight NonText ctermfg=19

" make comments and HTML attributes italic
highlight Comment cterm=italic
highlight htmlArg cterm=italic
highlight xmlAttrib cterm=italic
highlight Type cterm=italic
highlight Normal ctermbg=none

"tells ctags where to look for tags file
set tags=./tags;
